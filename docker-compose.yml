version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - service_sim
      - service_agent
    networks:
      - default

  pgdb:
    container_name: pgdb_scrapping
    image: postgres:alpine
    ports:
      - 15000:5432
    environment:
      POSTGRES_DB: scrapping
      POSTGRES_USER: articles
      POSTGRES_PASSWORD: articles
    volumes:
      - ./docker_init.sql:/docker-entrypoint-initdb.d/docker_init.sql
      - pgdata:/var/lib/postgresql/data
    networks:
      - default

  zookeeper:
    image: zookeeper:latest
    ports:
      - "127.0.0.1:15001:2181"
    networks:
      - default

  kafka:
    image: wurstmeister/kafka:latest
    hostname: kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: nc -vz localhost 9092
      interval: 10s
      timeout: 10s
      retries: 3
    ports:
      - "127.0.0.1:15002:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "scrapping:1:1"
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      LOGGING_LEVEL_COM_PROVECTUS: WARN
    networks:
      - default

  scrapping:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: scrapping
    environment:
      - TZ = 'Europe/Moscow'
    depends_on:
      kafka:
        condition: service_healthy
      pgdb:
        condition: service_started
    volumes:
      - ./config/config.yaml:/app/config/config.yaml
    ports:
      - "9003:9003"
    networks:
      - default

  service_sim:
    build:
      context: .
      dockerfile: Dockerfile.sim
    container_name: service_sim
    environment:
      - TZ=Europe/Moscow
    depends_on:
      kafka:
        condition: service_healthy
      pgdb:
        condition: service_started
    volumes:
      - ./config/config_sim.yaml:/app/config/config_sim.yaml
      - faiss_data:/app/faiss_data
    ports:
      - "9004:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

  service_agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: service_agent
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_TTL=3600
    depends_on:
      redis:
        condition: service_started
      service_sim:
        condition: service_started
    ports:
      - "9005:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - default

  redisinsight:
    image: redislabs/redisinsight
    restart: always
    ports:
      - "5540:5540"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - redisinsight-data:/db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6379"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - default

  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - "--config.file=/etc/prometheus/prometheus.yml"

  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"

networks:
  default:
    driver: bridge

volumes:
  pgdata:
  faiss_data:
  redis-data:
  redisinsight-data:
